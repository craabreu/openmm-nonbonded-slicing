name: Linux

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    # Weely tests run on Sundays at 4 AM UTC (12 AM EST):
    - cron: "0 4 * * 0"


jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Oldest supported versions
          - name: Linux (CUDA 10.2, Python 3.7)
            os: ubuntu-18.04
            cuda-version: "10.2.89"
            gcc-version: "8.5.*"
            nvcc-version: "10.2"
            python-version: "3.7"

          # Latest supported versions
          - name: Linux (CUDA 11.2, Python 3.10)
            os: ubuntu-18.04
            cuda-version: "11.2.2"
            gcc-version: "10.3.*"
            nvcc-version: "11.2"
            python-version: "3.10"

    steps:
      - name: "Check out"
        uses: actions/checkout@v2

      - name: "Install CUDA Toolkit on Linux"
        uses: Jimver/cuda-toolkit@v0.2.5
        with:
          cuda: ${{ matrix.cuda-version }}

      - name: "Update the conda enviroment file"
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '@'
          tokenSuffix: '@'
          files: devtools/conda-envs/build-${{ matrix.os }}.yml
        env:
          CUDATOOLKIT_VERSION: ${{ matrix.cuda-version }}
          GCC_VERSION: ${{ matrix.gcc-version }}
          NVCC_VERSION: ${{ matrix.nvcc-version }}

      - uses: conda-incubator/setup-miniconda@v2
        name: "Install dependencies with conda"
        with:
          activate-environment: build
          environment-file: devtools/conda-envs/build-${{ matrix.os }}.yml
          python-version: ${{ matrix.python-version }}

      - name: "List conda packages"
        shell: bash -l {0}
        run: conda list

      - name: "Configure"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DOPENMM_DIR=${CONDA_PREFIX} \
            -DPMESLICING_BUILD_OPENCL_LIB=ON \
            -DOPENCL_DIR=${CONDA_PREFIX} \
            -DPMESLICING_BUILD_CUDA_LIB=ON \
            -DCUDA_TOOLKIT_ROOT_DIR=${CUDA_PATH}

      - name: "Build"
        shell: bash -l {0}
        run: |
          cd build
          make -j2 install
          make -j2 PythonInstall

      - name: "List plugins"
        shell: bash -l {0}
        run: |
          python -c "import openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: "Run C++ test"
        shell: bash -l {0}
        run: |
          cd build
          ctest --output-on-failure --exclude-regex TestCuda

      - name: "Run Python test"
        shell: bash -l {0}
        run: |
          cd build/python/tests
          pytest --verbose -k 'not (Cuda or OpenCL)' Test*
