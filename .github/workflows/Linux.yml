name: Linux

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    # Weely tests run on Sundays at 4 AM UTC (12 AM EST):
    - cron: "0 4 * * 0"

jobs:
  unix:
    runs-on: ubuntu-22.04
    name: Linux (Python ${{ matrix.python-version }}, OpenMM ${{ matrix.openmm-version }}, GCC ${{ matrix.compiler-version }}, CUDA ${{ matrix.cuda-version }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.12"
            openmm-version: "8.3"
            cuda-version: "12.9"
            compiler-version: "14.3"
          - python-version: "3.11"
            openmm-version: "8.1"
            cuda-version: "11.8"
            compiler-version: "13.3"

    steps:
      - name: "Check out"
        uses: actions/checkout@v5

      - name: "Install AMD OpenCL on Linux"
        run: source devtools/scripts/install_amd_opencl.sh

      - name: "Update the conda enviroment file"
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '@'
          tokenSuffix: '@'
          files: devtools/conda-envs/build-ubuntu-22.04.yml
        env:
          CUDA_VERSION: ${{ matrix.cuda-version }}
          COMPILER_VERSION: ${{ matrix.compiler-version }}
          OPENMM_VERSION: ${{ matrix.openmm-version }}

      - uses: conda-incubator/setup-miniconda@v3
        name: "Install dependencies with conda"
        with:
          activate-environment: build
          environment-file: devtools/conda-envs/build-ubuntu-22.04.yml
          python-version: ${{ matrix.python-version }}

      - name: "Install CUDA packages"
        shell: bash -l {0}
        run: |
          cuda_major=$(echo "${{ matrix.cuda-version }}" | cut -d. -f1)
          if [[ "$cuda_major" -ge 12 ]]; then
            conda install -c conda-forge cuda-nvcc_linux-64 cuda-cudart-dev cuda-nvrtc-dev libcufft-dev
          fi

      - name: "List conda packages"
        shell: bash -l {0}
        run: conda list

      - name: "Configure"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          cmake ..

      - name: "Build"
        shell: bash -l {0}
        run: |
          cd build
          make -j2 install
          make -j2 PythonInstall

      - name: "List plugins"
        shell: bash -l {0}
        run: |
          python -c "import openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: "Run C++ test"
        shell: bash -l {0}
        run: |
          cd build
          ctest --output-on-failure --exclude-regex 'Test[Cuda|OpenCL]'

      - name: "Run Python test"
        shell: bash -l {0}
        run: |
          cd build/python/tests
          pytest --verbose -k 'not (Cuda or OpenCL)' Test*
