#---------------------------------------------------
# OpenMM NonbondedSlicing Plugin OPENCL Platform
#----------------------------------------------------

# Collect up information about the version of the OpenMM library we're building
# and make it available to the code so it can be built into the binaries.

SET(PLUGIN_OPENCL_LIBRARY_NAME NonbondedSlicingOpenCL)

SET(SHARED_TARGET ${PLUGIN_OPENCL_LIBRARY_NAME})

# These are all the places to search for header files which are
# to be part of the API.
SET(API_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_SOURCE_DIR}/include/internal")

# Locate header files.
SET(API_INCLUDE_FILES)
FOREACH(dir ${API_INCLUDE_DIRS})
    FILE(GLOB fullpaths ${dir}/*.h)
    SET(API_INCLUDE_FILES ${API_INCLUDE_FILES} ${fullpaths})
ENDFOREACH(dir)

# collect up source files
SET(SOURCE_FILES) # empty
SET(SOURCE_INCLUDE_FILES)

SET(OPENMM_SOURCE_SUBDIRS . ../common)
FOREACH(subdir ${OPENMM_SOURCE_SUBDIRS})
    FILE(GLOB_RECURSE src_files  ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/src/*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/${subdir}/src/*.c)
    FILE(GLOB incl_files ${CMAKE_CURRENT_SOURCE_DIR}/${subdir}/src/*.h)
    SET(SOURCE_FILES         ${SOURCE_FILES}         ${src_files})   #append
    SET(SOURCE_INCLUDE_FILES ${SOURCE_INCLUDE_FILES} ${incl_files})
ENDFOREACH(subdir)

# Set variables needed for encoding kernel sources into a C++ class

SET(OPENCL_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
SET(OPENCL_SOURCE_CLASS OpenCLNonbondedSlicingKernelSources)
SET(OPENCL_KERNELS_CPP ${CMAKE_CURRENT_BINARY_DIR}/src/${OPENCL_SOURCE_CLASS}.cpp)
SET(OPENCL_KERNELS_H ${CMAKE_CURRENT_BINARY_DIR}/src/${OPENCL_SOURCE_CLASS}.h)
SET(SOURCE_FILES ${SOURCE_FILES} ${OPENCL_KERNELS_CPP} ${OPENCL_KERNELS_H})
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_BINARY_DIR}/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_BINARY_DIR}/_deps/vkfft-src/vkFFT)

# Create the library

INCLUDE_DIRECTORIES(${OPENCL_TOOLKIT_INCLUDE})

FILE(GLOB OPENCL_KERNELS ${OPENCL_SOURCE_DIR}/kernels/*.cl)
ADD_CUSTOM_COMMAND(OUTPUT ${OPENCL_KERNELS_CPP} ${OPENCL_KERNELS_H}
    COMMAND ${CMAKE_COMMAND}
    ARGS -D OPENCL_SOURCE_DIR=${OPENCL_SOURCE_DIR} -D OPENCL_KERNELS_CPP=${OPENCL_KERNELS_CPP} -D OPENCL_KERNELS_H=${OPENCL_KERNELS_H} -D OPENCL_SOURCE_CLASS=${OPENCL_SOURCE_CLASS} -P ${CMAKE_SOURCE_DIR}/platforms/opencl/EncodeOpenCLFiles.cmake
    DEPENDS ${OPENCL_KERNELS}
)
SET_SOURCE_FILES_PROPERTIES(${OPENCL_KERNELS_CPP} ${OPENCL_KERNELS_H} PROPERTIES GENERATED TRUE)

# Add common kernels

SET(COMMON_KERNELS_CPP ${CMAKE_CURRENT_BINARY_DIR}/../common/src/CommonNonbondedSlicingKernelSources.cpp)
SET(SOURCE_FILES ${SOURCE_FILES} ${OPENCL_KERNELS_CPP} ${OPENCL_KERNELS_H} ${COMMON_KERNELS_CPP})

INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/../common/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_SOURCE_DIR}/platforms/opencl/include)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_SOURCE_DIR}/platforms/opencl/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_BINARY_DIR}/platforms/opencl/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_SOURCE_DIR}/platforms/common/include)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_BINARY_DIR}/platforms/common/src)
INCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_BINARY_DIR}/../common/src)

# Create the library

# INCLUDE_DIRECTORIES(${OPENCL_TOOLKIT_INCLUDE})

SET_SOURCE_FILES_PROPERTIES(${COMMON_KERNELS_CPP} PROPERTIES GENERATED TRUE)
ADD_LIBRARY(${SHARED_TARGET} SHARED ${SOURCE_FILES} ${SOURCE_INCLUDE_FILES} ${API_INCLUDE_FILES})
ADD_DEPENDENCIES(${SHARED_TARGET} CommonNonbondedSlicingKernels)

TARGET_LINK_LIBRARIES(${SHARED_TARGET} ${OPENCL_LIBRARIES})
TARGET_LINK_LIBRARIES(${SHARED_TARGET} OpenMM)
TARGET_LINK_LIBRARIES(${SHARED_TARGET} OpenMMOpenCL)
TARGET_LINK_LIBRARIES(${SHARED_TARGET} ${PLUGIN_LIBRARY_NAME})
SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
    COMPILE_FLAGS "-DOPENMM_BUILDING_SHARED_LIBRARY ${EXTRA_COMPILE_FLAGS}"
    LINK_FLAGS "${EXTRA_COMPILE_FLAGS}")
IF (APPLE)
    SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES LINK_FLAGS "-F/Library/Frameworks -framework OPENCL ${EXTRA_COMPILE_FLAGS}")
ENDIF (APPLE)

INSTALL(TARGETS ${SHARED_TARGET} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/plugins)
# Ensure that links to the main OPENCL library will be resolved.
IF (APPLE)
    SET(OPENCL_LIBRARY libOpenMMOPENCL.dylib)
    INSTALL(CODE "EXECUTE_PROCESS(COMMAND install_name_tool -change ${OPENCL_LIBRARY} @loader_path/${OPENCL_LIBRARY} ${CMAKE_INSTALL_PREFIX}/lib/plugins/lib${SHARED_TARGET}.dylib)")
ENDIF (APPLE)

SUBDIRS (tests)
